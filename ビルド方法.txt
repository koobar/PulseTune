PulseTune のビルド方法
よほどの理由がない限り、GitHub で配布しているバイナリをダウンロードして使用することを推奨しますが、
ソースコードからビルドする方法についても記載しておきます。

●LibPulseTuneのビルドについて
　LibPulseTuneは、以下のライブラリに依存しており、これらのライブラリがないとビルドできません。
　
　　・NAudio
　　・NVorbis
　　・NAudio.Vorbis
　
　これらのライブラリは、nugetを用いて管理されており、Visual Studioでプロジェクトを読み込んだ場合に
　自動的にパッケージが復元され、ビルド可能な状態になるはずです。もし、パッケージ不足等に起因する
　コンパイルエラーが発生する場合、これらのパッケージを手動で復元することで改善する場合があります。

　また、以下のDLLを参照可能にする必要があります。

　　・wavpackdll.dll  (version 5.8.0, x64)
　　　入手先：https://www.wavpack.com/downloads.html
　　・zilophixdec.dll (version 1.21, x64)
　　　入手先：https://github.com/koobar/zilophix/releases/tag/1.21

　これらのDLLは、ソリューションが配置されたディレクトリより一つ上の階層に存在する「dll」フォルダ内に
　配置されていることを前提としているため、ビルドの際には、以下の場所に「dll」フォルダを作成し、
　その中に上記DLLを配置してください。

　　カレントディレクトリ＝PulseTune のソリューションが配置されたディレクトリとした場合：
　　　..\dll
　　　├ wavpackdll.dll
　　　├ zilophixdec.dll

　なお、これらのDLLをプロジェクトから削除してしまってもビルドは成功します。
　しかし、WavPackとZilophiXの再生ができなくなります。

　これらの作業を完了したあとに、一度ソリューションまたはプロジェクトを再読み込みすることを推奨します。


●PulseTuneのビルドについて
　PulseTuneのプロジェクトは、以下のライブラリに依存しており、これらのライブラリがないとビルドできません。

　　・LibPulseTune
　　・Microsoft-WindowsAPICodePack-Core 　（nugetで管理されています）
　　・Microsoft-WindowsAPICodePack-Shell　（nugetで管理されています）

　LibPulseTuneは同じソリューション内に存在するため、プロジェクト参照で参照されます。
　それ以外のライブラリはnugetを用いて管理されており、Visual Studioでプロジェクトを読み込んだ場合に
　自動的にパッケージが復元され、ビルド可能な状態になるはずです。もし、パッケージ不足等に起因する
　コンパイルエラーが発生する場合、これらのパッケージを手動で復元することで改善する場合があります。

　PulseTuneのビルド時にLibPulseTuneが使用可能な状態となっている必要があります。そのため、
　PulseTuneよりも先にLibPulseTuneのビルド環境を構築することを強く推奨します。

●バイナリの出力先
　ビルドして生成されたバイナリは、特に設定を変更していない場合、ソリューションが配置されたディレクトリより
　一つ上の階層のディレクトリに生成されたフォルダ「bin」の内部に配置されます。

　Visual Studio のデフォルトの出力先とは異なる場所に配置される点に注意してください。